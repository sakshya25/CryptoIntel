[{"D:\\projects\\CryptoIntel\\src\\index.js":"1","D:\\projects\\CryptoIntel\\src\\App.js":"2","D:\\projects\\CryptoIntel\\src\\app\\store.js":"3","D:\\projects\\CryptoIntel\\src\\services\\cryptoApi.js":"4","D:\\projects\\CryptoIntel\\src\\services\\cryptoNewsApi.js":"5","D:\\projects\\CryptoIntel\\src\\services\\cryptoExchangesApi.js":"6","D:\\projects\\CryptoIntel\\src\\components\\index.js":"7","D:\\projects\\CryptoIntel\\src\\components\\CryptoDetails.jsx":"8","D:\\projects\\CryptoIntel\\src\\components\\Exchanges.jsx":"9","D:\\projects\\CryptoIntel\\src\\components\\Cryptocurrencies.jsx":"10","D:\\projects\\CryptoIntel\\src\\components\\News.jsx":"11","D:\\projects\\CryptoIntel\\src\\components\\Homepage.jsx":"12","D:\\projects\\CryptoIntel\\src\\components\\Navbar.jsx":"13","D:\\projects\\CryptoIntel\\src\\components\\Loader.jsx":"14","D:\\projects\\CryptoIntel\\src\\components\\LineChart.jsx":"15"},{"size":466,"mtime":1702385236253,"results":"16","hashOfConfig":"17"},{"size":1532,"mtime":1712560651419,"results":"18","hashOfConfig":"17"},{"size":469,"mtime":1711825721168,"results":"19","hashOfConfig":"17"},{"size":1380,"mtime":1711823824992,"results":"20","hashOfConfig":"17"},{"size":658,"mtime":1712560951661,"results":"21","hashOfConfig":"17"},{"size":671,"mtime":1712561479644,"results":"22","hashOfConfig":"17"},{"size":322,"mtime":1702385236250,"results":"23","hashOfConfig":"17"},{"size":5530,"mtime":1712567933302,"results":"24","hashOfConfig":"17"},{"size":2451,"mtime":1712564252243,"results":"25","hashOfConfig":"17"},{"size":2024,"mtime":1711820748555,"results":"26","hashOfConfig":"17"},{"size":2093,"mtime":1712561754645,"results":"27","hashOfConfig":"17"},{"size":1935,"mtime":1712558917762,"results":"28","hashOfConfig":"17"},{"size":1829,"mtime":1702476795409,"results":"29","hashOfConfig":"17"},{"size":166,"mtime":1702385236247,"results":"30","hashOfConfig":"17"},{"size":2370,"mtime":1712564456387,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"40fdnd",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"D:\\projects\\CryptoIntel\\src\\index.js",[],"D:\\projects\\CryptoIntel\\src\\App.js",[],"D:\\projects\\CryptoIntel\\src\\app\\store.js",[],"D:\\projects\\CryptoIntel\\src\\services\\cryptoApi.js",[],"D:\\projects\\CryptoIntel\\src\\services\\cryptoNewsApi.js",["66"],"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nconst cryptoNewsHeaders = {\r\n  'X-RapidAPI-Key': 'b50f0efcd6mshfb6c8c5d3c38ffap1c8a0ajsn00988bbb242f',\r\n  'X-RapidAPI-Host': 'cryptocurrency-news2.p.rapidapi.com',\r\n};\r\n\r\nexport const cryptoNewsApi = createApi({\r\n  reducerPath: 'cryptoNewsApi',\r\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://cryptocurrency-news2.p.rapidapi.com/v1' }),\r\n  endpoints: (builder) => ({\r\n    getCryptoNews: builder.query({\r\n      query: () => ({\r\n        url: '/coindesk',\r\n        headers: cryptoNewsHeaders,\r\n      }),\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetCryptoNewsQuery } = cryptoNewsApi;","D:\\projects\\CryptoIntel\\src\\services\\cryptoExchangesApi.js",[],"D:\\projects\\CryptoIntel\\src\\components\\index.js",[],"D:\\projects\\CryptoIntel\\src\\components\\CryptoDetails.jsx",["67","68"],"import React, { useState } from 'react';\r\nimport HTMLReactParser from 'html-react-parser';\r\nimport { useParams } from 'react-router-dom';\r\nimport millify from 'millify';\r\nimport { Col, Row, Typography, Select } from 'antd';\r\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\r\n\r\nimport { useGetCryptoDetailsQuery, useGetCryptoHistoryQuery } from '../services/cryptoApi';\r\nimport Loader from './Loader';\r\nimport LineChart from './LineChart';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst CryptoDetails = () => {\r\n  const { coinId } = useParams();\r\n  const [timeperiod, setTimeperiod] = useState('7d');\r\n  const { data, isFetching } = useGetCryptoDetailsQuery(coinId);\r\n  const { data: coinHistory } = useGetCryptoHistoryQuery({ coinId, timeperiod });\r\n  const cryptoDetails = data?.data?.coin;\r\n// console.log(cryptoDetails);\r\n  if (isFetching) return <Loader />;\r\n\r\n  const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\r\n\r\n  const stats = [\r\n    { title: 'Price to USD', value: `$ ${cryptoDetails?.price && millify(Number(cryptoDetails?.price))}`, icon: <DollarCircleOutlined /> },\r\n    { title: 'Rank', value: cryptoDetails?.rank, icon: <NumberOutlined /> },\r\n    { title: '24h Volume', value: `$ ${cryptoDetails?.volume && millify(cryptoDetails?.volume)}`, icon: <ThunderboltOutlined /> },\r\n    { title: 'Market Cap', value: `$ ${cryptoDetails?.marketCap && millify(cryptoDetails?.marketCap)}`, icon: <DollarCircleOutlined /> },\r\n    { title: 'All-time-high(daily avg.)', value: `$ ${cryptoDetails?.allTimeHigh?.price && millify(cryptoDetails?.allTimeHigh?.price)}`, icon: <TrophyOutlined /> },\r\n  ];\r\n\r\n  const genericStats = [\r\n    { title: 'Number Of Markets', value: cryptoDetails?.numberOfMarkets, icon: <FundOutlined /> },\r\n    { title: 'Number Of Exchanges', value: cryptoDetails?.numberOfExchanges, icon: <MoneyCollectOutlined /> },\r\n    { title: 'Aprroved Supply', value: cryptoDetails?.supply?.confirmed ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\r\n    { title: 'Total Supply', value: `$ ${cryptoDetails?.supply?.total && millify(cryptoDetails?.supply?.total)}`, icon: <ExclamationCircleOutlined /> },\r\n    { title: 'Circulating Supply', value: `$ ${cryptoDetails?.supply?.circulating && millify(cryptoDetails?.supply?.circulating)}`, icon: <ExclamationCircleOutlined /> },\r\n  ];\r\n\r\n  return (\r\n    <Col className=\"coin-detail-container\">\r\n      <Col className=\"coin-heading-container\">\r\n        <Title level={2} className=\"coin-name\">\r\n          {data?.data?.coin.name} ({data?.data?.coin.symbol}) Price\r\n        </Title>\r\n        <p>{cryptoDetails.name} live price in US Dollar (USD). View value statistics, market cap and supply.</p>\r\n      </Col>\r\n      <Select defaultValue=\"7d\" className=\"select-timeperiod\" placeholder=\"Select Timeperiod\" onChange={(value) => setTimeperiod(value)}>\r\n        {time.map((date) => <Option key={date}>{date}</Option>)}\r\n      </Select>\r\n      <LineChart coinHistory={coinHistory} currentPrice={millify(cryptoDetails?.price)} coinName={cryptoDetails?.name} />\r\n      <Col className=\"stats-container\">\r\n        <Col className=\"coin-value-statistics\">\r\n          <Col className=\"coin-value-statistics-heading\">\r\n            <Title level={3} className=\"coin-details-heading\">{cryptoDetails.name} Value Statistics</Title>\r\n            <p>An overview showing the statistics of {cryptoDetails.name}, such as the base and quote currency, the rank, and trading volume.</p>\r\n          </Col>\r\n          {stats.map(({ icon, title, value,index }) => (\r\n            <Col className=\"coin-stats\" key={index}>\r\n              <Col className=\"coin-stats-name\">\r\n                <Text>{icon}</Text>\r\n                <Text>{title}</Text>\r\n              </Col>\r\n              <Text className=\"stats\">{value}</Text>\r\n            </Col>\r\n          ))}\r\n        </Col>\r\n        <Col className=\"other-stats-info\">\r\n          <Col className=\"coin-value-statistics-heading\">\r\n            <Title level={3} className=\"coin-details-heading\">Other Stats Info</Title>\r\n            <p>An overview showing the statistics of {cryptoDetails.name}, such as the base and quote currency, the rank, and trading volume.</p>\r\n          </Col>\r\n          {genericStats.map(({ icon, title, value,index }) => (\r\n            <Col className=\"coin-stats\" key={index}>\r\n              <Col className=\"coin-stats-name\">\r\n                <Text>{icon}</Text>\r\n                <Text>{title}</Text>\r\n              </Col>\r\n              <Text className=\"stats\">{value}</Text>\r\n            </Col>\r\n          ))}\r\n        </Col>\r\n      </Col>\r\n      <Col className=\"coin-desc-link\">\r\n        <Row className=\"coin-desc\">\r\n          <Title level={3} className=\"coin-details-heading\">What is {cryptoDetails.name}?</Title>\r\n          {HTMLReactParser(cryptoDetails.description)}\r\n        </Row>\r\n        <Col className=\"coin-links\">\r\n          <Title level={3} className=\"coin-details-heading\">{cryptoDetails.name} Links</Title>\r\n          {cryptoDetails.links?.map((link) => (\r\n            <Row className=\"coin-link\" key={link.name}>\r\n              <Title level={5} className=\"link-name\">{link.type}</Title>\r\n              <a href={link.url} target=\"_blank\" rel=\"noreferrer\">{link.name}</a>\r\n            </Row>\r\n          ))}\r\n        </Col>\r\n      </Col>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default CryptoDetails;\r\n","D:\\projects\\CryptoIntel\\src\\components\\Exchanges.jsx",["69","70","71","72"],"import React from 'react';\r\nimport millify from 'millify';\r\nimport { Collapse, Row, Col, Typography, Avatar } from 'antd';\r\nimport HTMLReactParser from 'html-react-parser';\r\n\r\nimport Loader from './Loader';\r\nimport { useGetCryptoExchangesQuery } from '../services/cryptoExchangesApi';\r\n\r\nconst { Text } = Typography;\r\nconst { Panel } = Collapse;\r\n\r\nconst Exchanges = () => {\r\n  const { data, isFetching } = useGetCryptoExchangesQuery();\r\n\r\n  if (isFetching) return <Loader />;\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={[32, 32]}>\r\n        <Col span={6}>\r\n          <strong>Exchanges</strong>\r\n        </Col>\r\n        <Col span={6}>\r\n          <strong>24h Trade Volume (BTC)</strong>\r\n        </Col>\r\n        <Col span={6}>\r\n          <strong>24h Normalized Volume (BTC)</strong>\r\n        </Col>\r\n        <Col span={6}>\r\n          <strong>Changes</strong>\r\n        </Col>\r\n      </Row>\r\n      <Collapse accordion>\r\n        {data?.map((exchange, index) => (\r\n          <Panel\r\n            key={index}\r\n            header={\r\n              <Row align=\"middle\">\r\n                <Col span={6}>\r\n                  <Avatar src={exchange.image} />\r\n                  <Text>{exchange.name}</Text>\r\n                </Col>\r\n                <Col span={6}>${millify(exchange.trade_volume_24h_btc)}</Col>\r\n                <Col span={6}>\r\n                  ${millify(exchange.trade_volume_24h_btc_normalized)}\r\n                </Col>\r\n                <Col span={6}>${millify(exchange.year_established * 100)}</Col>\r\n              </Row>\r\n            }\r\n          >\r\n            {HTMLReactParser(\r\n              exchange.description ||\r\n                `${exchange.name} Launched in September ${exchange.year_established}. KuCoin is a global cryptocurrency exchange with its operational headquarters in Seychelles. As a user-oriented platform with a focus on inclusiveness and community action reach, it offers over 800 digital assets and currently provides Spot trading, Margin trading, P2P Fiat trading, Futures trading, Staking, and Lending to its 30 million users in more than 200 countries and regions. KuCoin is currently one of the top 5 crypto exchanges. In 2023, KuCoin was named one of the Best Crypto Exchanges by Forbes and recognized as a highly commended global exchange in Finder's 2023 Global Cryptocurrency Trading Platform Awards.`\r\n            )}\r\n          </Panel>\r\n        ))}\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Exchanges;\r\n","D:\\projects\\CryptoIntel\\src\\components\\Cryptocurrencies.jsx",[],"D:\\projects\\CryptoIntel\\src\\components\\News.jsx",[],"D:\\projects\\CryptoIntel\\src\\components\\Homepage.jsx",[],"D:\\projects\\CryptoIntel\\src\\components\\Navbar.jsx",[],"D:\\projects\\CryptoIntel\\src\\components\\Loader.jsx",[],"D:\\projects\\CryptoIntel\\src\\components\\LineChart.jsx",["73"],"import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Col, Row, Typography, Select } from 'antd';\r\n\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst LineChart = ({ coinHistory, currentPrice, coinName }) => {\r\n  const [selectedRange, setSelectedRange] = useState('30');\r\n  const [coinTimestamp, setCoinTimestamp] = useState([]);\r\n  const coinPrice = [];\r\n\r\n  for (let i = 0; i < coinHistory?.data?.history?.length; i += 1) {\r\n    coinPrice.push(coinHistory?.data?.history[i].price);\r\n  }\r\n\r\n  const generateTimestamp = (range) => {\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - parseInt(range, 10)); // Adjust the start date based on the selected range\r\n\r\n    const timestamps = [];\r\n    for (let i = 0; i <= parseInt(range, 10); i++) {\r\n      const newDate = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\r\n      timestamps.push(newDate.toLocaleDateString());\r\n    }\r\n    setCoinTimestamp(timestamps);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateTimestamp(selectedRange);\r\n  }, [selectedRange]);\r\n\r\n  const handleRangeChange = (value) => {\r\n    setSelectedRange(value);\r\n  };\r\n\r\n  const data = {\r\n    labels: coinTimestamp,\r\n    datasets: [\r\n      {\r\n        label: 'Price In USD',\r\n        data: coinPrice,\r\n        fill: false,\r\n        backgroundColor: '#0071bd',\r\n        borderColor: '#0071bd',\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"chart-header\">\r\n        <Title level={2} className=\"chart-title\">\r\n          {coinName} Price Chart\r\n        </Title>\r\n        <Col className=\"price-container\">\r\n          <Title level={5} className=\"price-change\">\r\n            Change: {coinHistory?.data?.change}%\r\n          </Title>\r\n          <Title level={5} className=\"current-price\">\r\n            Current {coinName} Price: $ {currentPrice}\r\n          </Title>\r\n        </Col>\r\n        <Col span={24}>\r\n          <Select\r\n            value={selectedRange}\r\n            style={{ width: 200, color: 'black' }}\r\n            onChange={handleRangeChange}\r\n          >\r\n            <Option value=\"7\">7 days</Option>\r\n            <Option value=\"30\">30 days</Option>\r\n            <Option value=\"90\">90 days</Option>\r\n          </Select>\r\n        </Col>\r\n      </Row>\r\n      <Line data={data} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n",{"ruleId":"74","severity":2,"message":"75","line":21,"column":56,"nodeType":"76","messageId":"77","fix":"78"},{"ruleId":"79","severity":2,"message":"80","line":60,"column":43,"nodeType":"81","messageId":"77","endLine":60,"endColumn":44,"fix":"82"},{"ruleId":"79","severity":2,"message":"80","line":75,"column":50,"nodeType":"81","messageId":"77","endLine":75,"endColumn":51,"fix":"83"},{"ruleId":"84","severity":2,"message":"85","line":38,"column":15,"nodeType":"86","messageId":"87","endLine":48,"endColumn":21,"fix":"88"},{"ruleId":"89","severity":2,"message":"90","line":52,"column":36,"nodeType":"91","messageId":"92","endLine":52,"endColumn":38,"fix":"93"},{"ruleId":"94","severity":2,"message":"95","line":53,"column":1,"nodeType":"76","messageId":"96","endLine":53,"endColumn":713},{"ruleId":"97","severity":2,"message":"98","line":53,"column":713,"nodeType":"91","messageId":"77","endLine":54,"endColumn":1,"fix":"99"},{"ruleId":"100","severity":2,"message":"101","line":22,"column":47,"nodeType":"102","messageId":"103","endLine":22,"endColumn":50},"eol-last","Newline required at end of file but not found.","Program","missing",{"range":"104","text":"105"},"comma-spacing","A space is required after ','.","Punctuator",{"range":"106","text":"107"},{"range":"108","text":"107"},"react/jsx-wrap-multilines","Missing parentheses around multilines JSX","JSXElement","missingParens",{"range":"109","text":"110"},"operator-linebreak","'||' should be placed at the beginning of the line.","LogicalExpression","operatorAtBeginning",{"range":"111","text":"112"},"max-len","This line has a length of 712. Maximum allowed is 250.","max","comma-dangle","Missing trailing comma.",{"range":"113","text":"114"},"no-plusplus","Unary operator '++' used.","UpdateExpression","unexpectedUnaryOp",[658,658],"\n",[3705,3705]," ",[4431,4431],[1019,1535],"{(\n              <Row align=\"middle\">\r\n                <Col span={6}>\r\n                  <Avatar src={exchange.image} />\r\n                  <Text>{exchange.name}</Text>\r\n                </Col>\r\n                <Col span={6}>${millify(exchange.trade_volume_24h_btc)}</Col>\r\n                <Col span={6}>\r\n                  ${millify(exchange.trade_volume_24h_btc_normalized)}\r\n                </Col>\r\n                <Col span={6}>${millify(exchange.year_established * 100)}</Col>\r\n              </Row>\n            )",[1616,1637],"\r\n                || ",[2333,2333],","]