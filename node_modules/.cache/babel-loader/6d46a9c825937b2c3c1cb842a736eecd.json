{"ast":null,"code":"import * as React from 'react';\nimport { getRawValueLabeled } from '../utils/valueUtil';\nimport { formatStrategyKeys } from '../utils/strategyUtil';\n/** Return  */\n\nexport default function useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n    getEntityByValue = _ref.getEntityByValue,\n    getEntityByKey = _ref.getEntityByKey,\n    treeConduction = _ref.treeConduction,\n    showCheckedStrategy = _ref.showCheckedStrategy,\n    conductKeyEntities = _ref.conductKeyEntities,\n    getLabelProp = _ref.getLabelProp;\n  return React.useMemo(function () {\n    var mergedRawValues = rawValues;\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}","map":{"version":3,"names":["React","getRawValueLabeled","formatStrategyKeys","useSelectValues","rawValues","_ref","value","getEntityByValue","getEntityByKey","treeConduction","showCheckedStrategy","conductKeyEntities","getLabelProp","useMemo","mergedRawValues","rawKeys","map","val","entity","key","data"],"sources":["D:/projects/CryptoIntel/node_modules/rc-tree-select/es/hooks/useSelectValues.js"],"sourcesContent":["import * as React from 'react';\nimport { getRawValueLabeled } from '../utils/valueUtil';\nimport { formatStrategyKeys } from '../utils/strategyUtil';\n/** Return  */\n\nexport default function useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n      getEntityByValue = _ref.getEntityByValue,\n      getEntityByKey = _ref.getEntityByKey,\n      treeConduction = _ref.treeConduction,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      conductKeyEntities = _ref.conductKeyEntities,\n      getLabelProp = _ref.getLabelProp;\n  return React.useMemo(function () {\n    var mergedRawValues = rawValues;\n\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,kBAAkB,QAAQ,uBAAuB;AAC1D;;AAEA,eAAe,SAASC,eAAeA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACvD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,gBAAgB,GAAGF,IAAI,CAACE,gBAAgB;IACxCC,cAAc,GAAGH,IAAI,CAACG,cAAc;IACpCC,cAAc,GAAGJ,IAAI,CAACI,cAAc;IACpCC,mBAAmB,GAAGL,IAAI,CAACK,mBAAmB;IAC9CC,kBAAkB,GAAGN,IAAI,CAACM,kBAAkB;IAC5CC,YAAY,GAAGP,IAAI,CAACO,YAAY;EACpC,OAAOZ,KAAK,CAACa,OAAO,CAAC,YAAY;IAC/B,IAAIC,eAAe,GAAGV,SAAS;IAE/B,IAAIK,cAAc,EAAE;MAClB,IAAIM,OAAO,GAAGb,kBAAkB,CAACE,SAAS,CAACY,GAAG,CAAC,UAAUC,GAAG,EAAE;QAC5D,IAAIC,MAAM,GAAGX,gBAAgB,CAACU,GAAG,CAAC;QAClC,OAAOC,MAAM,GAAGA,MAAM,CAACC,GAAG,GAAGF,GAAG;MAClC,CAAC,CAAC,EAAEP,mBAAmB,EAAEC,kBAAkB,CAAC;MAC5CG,eAAe,GAAGC,OAAO,CAACC,GAAG,CAAC,UAAUG,GAAG,EAAE;QAC3C,IAAID,MAAM,GAAGV,cAAc,CAACW,GAAG,CAAC;QAChC,OAAOD,MAAM,GAAGA,MAAM,CAACE,IAAI,CAACd,KAAK,GAAGa,GAAG;MACzC,CAAC,CAAC;IACJ;IAEA,OAAOlB,kBAAkB,CAACa,eAAe,EAAER,KAAK,EAAEC,gBAAgB,EAAEK,YAAY,CAAC;EACnF,CAAC,EAAE,CAACR,SAAS,EAAEE,KAAK,EAAEG,cAAc,EAAEC,mBAAmB,EAAEH,gBAAgB,CAAC,CAAC;AAC/E","ignoreList":[]},"metadata":{},"sourceType":"module"}