{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\n * We can remove this when IE not support anymore\n */\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n    this.origin = '';\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n      var target = Number(value);\n      if (Number.isNaN(target)) {\n        return this;\n      }\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return num2str(this.number);\n    }\n  }]);\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n    this.origin = '';\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n      var offset = new BigIntDecimal(value);\n      if (offset.isInvalidate()) {\n        return this;\n      }\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n        negativeStr = _trimNumber.negativeStr,\n        trimStr = _trimNumber.trimStr;\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  if (numStr === '') {\n    return '';\n  }\n  var _trimNumber2 = trimNumber(numStr),\n    negativeStr = _trimNumber2.negativeStr,\n    integerStr = _trimNumber2.integerStr,\n    decimalStr = _trimNumber2.decimalStr;\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n    if (advancedNum >= 5) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"0.\".concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\n    }\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","map":{"version":3,"names":["_classCallCheck","_createClass","getNumberPrecision","isE","num2str","trimNumber","validateNumber","supportBigInt","NumberDecimal","value","origin","String","trim","empty","number","Number","key","negate","toNumber","add","isInvalidate","target","isNaN","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","maxPrecision","Math","max","toFixed","isEmpty","equals","lessEquals","toString","safe","arguments","length","undefined","BigIntDecimal","nan","mergedValue","trimRet","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","getMark","getIntegerStr","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","clone","offset","maxDecimalLength","myAlignedDecimal","offsetAlignedDecimal","valueStr","_trimNumber","negativeStr","hydrateValueStr","slice","NaN","fullStr","getMiniDecimal","numStr","separatorStr","precision","_trimNumber2","integerStr","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal","repeat"],"sources":["D:/projects/CryptoIntel/node_modules/rc-input-number/es/utils/MiniDecimal.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\n * We can remove this when IE not support anymore\n */\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    this.origin = '';\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    this.origin = '';\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"0.\".concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,YAAY,MAAM,wCAAwC;;AAEjE;AACA,SAASC,kBAAkB,EAAEC,GAAG,EAAEC,OAAO,EAAEC,UAAU,EAAEC,cAAc,QAAQ,cAAc;AAC3F,SAASC,aAAa,QAAQ,eAAe;AAC7C;AACA;AACA;;AAEA,OAAO,IAAIC,aAAa,GAAG,aAAa,YAAY;EAClD,SAASA,aAAaA,CAACC,KAAK,EAAE;IAC5BT,eAAe,CAAC,IAAI,EAAEQ,aAAa,CAAC;IAEpC,IAAI,CAACE,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACD,KAAK,IAAIA,KAAK,KAAK,CAAC,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,CAACG,IAAI,CAAC,CAAC,EAAE;MAClD,IAAI,CAACC,KAAK,GAAG,IAAI;MACjB;IACF;IAEA,IAAI,CAACH,MAAM,GAAGC,MAAM,CAACF,KAAK,CAAC;IAC3B,IAAI,CAACK,MAAM,GAAGC,MAAM,CAACN,KAAK,CAAC;EAC7B;EAEAR,YAAY,CAACO,aAAa,EAAE,CAAC;IAC3BQ,GAAG,EAAE,QAAQ;IACbP,KAAK,EAAE,SAASQ,MAAMA,CAAA,EAAG;MACvB,OAAO,IAAIT,aAAa,CAAC,CAAC,IAAI,CAACU,QAAQ,CAAC,CAAC,CAAC;IAC5C;EACF,CAAC,EAAE;IACDF,GAAG,EAAE,KAAK;IACVP,KAAK,EAAE,SAASU,GAAGA,CAACV,KAAK,EAAE;MACzB,IAAI,IAAI,CAACW,YAAY,CAAC,CAAC,EAAE;QACvB,OAAO,IAAIZ,aAAa,CAACC,KAAK,CAAC;MACjC;MAEA,IAAIY,MAAM,GAAGN,MAAM,CAACN,KAAK,CAAC;MAE1B,IAAIM,MAAM,CAACO,KAAK,CAACD,MAAM,CAAC,EAAE;QACxB,OAAO,IAAI;MACb;MAEA,IAAIP,MAAM,GAAG,IAAI,CAACA,MAAM,GAAGO,MAAM,CAAC,CAAC;;MAEnC,IAAIP,MAAM,GAAGC,MAAM,CAACQ,gBAAgB,EAAE;QACpC,OAAO,IAAIf,aAAa,CAACO,MAAM,CAACQ,gBAAgB,CAAC;MACnD;MAEA,IAAIT,MAAM,GAAGC,MAAM,CAACS,gBAAgB,EAAE;QACpC,OAAO,IAAIhB,aAAa,CAACO,MAAM,CAACS,gBAAgB,CAAC;MACnD;MAEA,IAAIC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACzB,kBAAkB,CAAC,IAAI,CAACY,MAAM,CAAC,EAAEZ,kBAAkB,CAACmB,MAAM,CAAC,CAAC;MACxF,OAAO,IAAIb,aAAa,CAACM,MAAM,CAACc,OAAO,CAACH,YAAY,CAAC,CAAC;IACxD;EACF,CAAC,EAAE;IACDT,GAAG,EAAE,SAAS;IACdP,KAAK,EAAE,SAASoB,OAAOA,CAAA,EAAG;MACxB,OAAO,IAAI,CAAChB,KAAK;IACnB;EACF,CAAC,EAAE;IACDG,GAAG,EAAE,OAAO;IACZP,KAAK,EAAE,SAASa,KAAKA,CAAA,EAAG;MACtB,OAAOP,MAAM,CAACO,KAAK,CAAC,IAAI,CAACR,MAAM,CAAC;IAClC;EACF,CAAC,EAAE;IACDE,GAAG,EAAE,cAAc;IACnBP,KAAK,EAAE,SAASW,YAAYA,CAAA,EAAG;MAC7B,OAAO,IAAI,CAACS,OAAO,CAAC,CAAC,IAAI,IAAI,CAACP,KAAK,CAAC,CAAC;IACvC;EACF,CAAC,EAAE;IACDN,GAAG,EAAE,QAAQ;IACbP,KAAK,EAAE,SAASqB,MAAMA,CAACT,MAAM,EAAE;MAC7B,OAAO,IAAI,CAACH,QAAQ,CAAC,CAAC,MAAMG,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACH,QAAQ,CAAC,CAAC,CAAC;IAChG;EACF,CAAC,EAAE;IACDF,GAAG,EAAE,YAAY;IACjBP,KAAK,EAAE,SAASsB,UAAUA,CAACV,MAAM,EAAE;MACjC,OAAO,IAAI,CAACF,GAAG,CAACE,MAAM,CAACJ,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAC,CAACd,QAAQ,CAAC,CAAC,IAAI,CAAC;IAC7D;EACF,CAAC,EAAE;IACDF,GAAG,EAAE,UAAU;IACfP,KAAK,EAAE,SAASS,QAAQA,CAAA,EAAG;MACzB,OAAO,IAAI,CAACJ,MAAM;IACpB;EACF,CAAC,EAAE;IACDE,GAAG,EAAE,UAAU;IACfP,KAAK,EAAE,SAASuB,QAAQA,CAAA,EAAG;MACzB,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;MAEnF,IAAI,CAACD,IAAI,EAAE;QACT,OAAO,IAAI,CAACvB,MAAM;MACpB;MAEA,IAAI,IAAI,CAACU,YAAY,CAAC,CAAC,EAAE;QACvB,OAAO,EAAE;MACX;MAEA,OAAOhB,OAAO,CAAC,IAAI,CAACU,MAAM,CAAC;IAC7B;EACF,CAAC,CAAC,CAAC;EAEH,OAAON,aAAa;AACtB,CAAC,CAAC,CAAC;AACH,OAAO,IAAI6B,aAAa,GAAG,aAAa,YAAY;EAClD,SAASA,aAAaA,CAAC5B,KAAK,EAAE;IAC5BT,eAAe,CAAC,IAAI,EAAEqC,aAAa,CAAC;IAEpC,IAAI,CAAC3B,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACD,KAAK,IAAIA,KAAK,KAAK,CAAC,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,CAACG,IAAI,CAAC,CAAC,EAAE;MAClD,IAAI,CAACC,KAAK,GAAG,IAAI;MACjB;IACF;IAEA,IAAI,CAACH,MAAM,GAAGC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;;IAE7B,IAAIA,KAAK,KAAK,GAAG,EAAE;MACjB,IAAI,CAAC6B,GAAG,GAAG,IAAI;MACf;IACF;IAEA,IAAIC,WAAW,GAAG9B,KAAK,CAAC,CAAC;;IAEzB,IAAIN,GAAG,CAACoC,WAAW,CAAC,EAAE;MACpBA,WAAW,GAAGxB,MAAM,CAACwB,WAAW,CAAC;IACnC;IAEAA,WAAW,GAAG,OAAOA,WAAW,KAAK,QAAQ,GAAGA,WAAW,GAAGnC,OAAO,CAACmC,WAAW,CAAC;IAElF,IAAIjC,cAAc,CAACiC,WAAW,CAAC,EAAE;MAC/B,IAAIC,OAAO,GAAGnC,UAAU,CAACkC,WAAW,CAAC;MACrC,IAAI,CAACE,QAAQ,GAAGD,OAAO,CAACC,QAAQ;MAChC,IAAIC,OAAO,GAAGF,OAAO,CAACG,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC;MACxC,IAAI,CAACC,OAAO,GAAGC,MAAM,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC;MACjC,IAAIK,UAAU,GAAGL,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG;MAClC,IAAI,CAACM,OAAO,GAAGF,MAAM,CAACC,UAAU,CAAC;MACjC,IAAI,CAACE,UAAU,GAAGF,UAAU,CAACZ,MAAM;IACrC,CAAC,MAAM;MACL,IAAI,CAACG,GAAG,GAAG,IAAI;IACjB;EACF;EAEArC,YAAY,CAACoC,aAAa,EAAE,CAAC;IAC3BrB,GAAG,EAAE,SAAS;IACdP,KAAK,EAAE,SAASyC,OAAOA,CAAA,EAAG;MACxB,OAAO,IAAI,CAACT,QAAQ,GAAG,GAAG,GAAG,EAAE;IACjC;EACF,CAAC,EAAE;IACDzB,GAAG,EAAE,eAAe;IACpBP,KAAK,EAAE,SAAS0C,aAAaA,CAAA,EAAG;MAC9B,OAAO,IAAI,CAACN,OAAO,CAACb,QAAQ,CAAC,CAAC;IAChC;EACF,CAAC,EAAE;IACDhB,GAAG,EAAE,eAAe;IACpBP,KAAK,EAAE,SAAS2C,aAAaA,CAAA,EAAG;MAC9B,OAAO,IAAI,CAACJ,OAAO,CAAChB,QAAQ,CAAC,CAAC,CAACqB,QAAQ,CAAC,IAAI,CAACJ,UAAU,EAAE,GAAG,CAAC;IAC/D;IACA;AACJ;AACA;AACA;EAEE,CAAC,EAAE;IACDjC,GAAG,EAAE,cAAc;IACnBP,KAAK,EAAE,SAAS6C,YAAYA,CAACC,aAAa,EAAE;MAC1C,IAAIC,GAAG,GAAG,EAAE,CAACC,MAAM,CAAC,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC,CAACO,MAAM,CAAC,IAAI,CAACN,aAAa,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,IAAI,CAACL,aAAa,CAAC,CAAC,CAACM,MAAM,CAACH,aAAa,EAAE,GAAG,CAAC,CAAC;MACxH,OAAOT,MAAM,CAACU,GAAG,CAAC;IACpB;EACF,CAAC,EAAE;IACDxC,GAAG,EAAE,QAAQ;IACbP,KAAK,EAAE,SAASQ,MAAMA,CAAA,EAAG;MACvB,IAAI0C,KAAK,GAAG,IAAItB,aAAa,CAAC,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC;MAC9C2B,KAAK,CAAClB,QAAQ,GAAG,CAACkB,KAAK,CAAClB,QAAQ;MAChC,OAAOkB,KAAK;IACd;EACF,CAAC,EAAE;IACD3C,GAAG,EAAE,KAAK;IACVP,KAAK,EAAE,SAASU,GAAGA,CAACV,KAAK,EAAE;MACzB,IAAI,IAAI,CAACW,YAAY,CAAC,CAAC,EAAE;QACvB,OAAO,IAAIiB,aAAa,CAAC5B,KAAK,CAAC;MACjC;MAEA,IAAImD,MAAM,GAAG,IAAIvB,aAAa,CAAC5B,KAAK,CAAC;MAErC,IAAImD,MAAM,CAACxC,YAAY,CAAC,CAAC,EAAE;QACzB,OAAO,IAAI;MACb;MAEA,IAAIyC,gBAAgB,GAAGnC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACyB,aAAa,CAAC,CAAC,CAACjB,MAAM,EAAEyB,MAAM,CAACR,aAAa,CAAC,CAAC,CAACjB,MAAM,CAAC;MAC3F,IAAI2B,gBAAgB,GAAG,IAAI,CAACR,YAAY,CAACO,gBAAgB,CAAC;MAC1D,IAAIE,oBAAoB,GAAGH,MAAM,CAACN,YAAY,CAACO,gBAAgB,CAAC;MAChE,IAAIG,QAAQ,GAAG,CAACF,gBAAgB,GAAGC,oBAAoB,EAAE/B,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAErE,IAAIiC,WAAW,GAAG5D,UAAU,CAAC2D,QAAQ,CAAC;QAClCE,WAAW,GAAGD,WAAW,CAACC,WAAW;QACrCvB,OAAO,GAAGsB,WAAW,CAACtB,OAAO;MAEjC,IAAIwB,eAAe,GAAG,EAAE,CAACV,MAAM,CAACS,WAAW,CAAC,CAACT,MAAM,CAACd,OAAO,CAACU,QAAQ,CAACQ,gBAAgB,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;MAChG,OAAO,IAAIxB,aAAa,CAAC,EAAE,CAACoB,MAAM,CAACU,eAAe,CAACC,KAAK,CAAC,CAAC,EAAE,CAACP,gBAAgB,CAAC,EAAE,GAAG,CAAC,CAACJ,MAAM,CAACU,eAAe,CAACC,KAAK,CAAC,CAACP,gBAAgB,CAAC,CAAC,CAAC;IACxI;EACF,CAAC,EAAE;IACD7C,GAAG,EAAE,SAAS;IACdP,KAAK,EAAE,SAASoB,OAAOA,CAAA,EAAG;MACxB,OAAO,IAAI,CAAChB,KAAK;IACnB;EACF,CAAC,EAAE;IACDG,GAAG,EAAE,OAAO;IACZP,KAAK,EAAE,SAASa,KAAKA,CAAA,EAAG;MACtB,OAAO,IAAI,CAACgB,GAAG;IACjB;EACF,CAAC,EAAE;IACDtB,GAAG,EAAE,cAAc;IACnBP,KAAK,EAAE,SAASW,YAAYA,CAAA,EAAG;MAC7B,OAAO,IAAI,CAACS,OAAO,CAAC,CAAC,IAAI,IAAI,CAACP,KAAK,CAAC,CAAC;IACvC;EACF,CAAC,EAAE;IACDN,GAAG,EAAE,QAAQ;IACbP,KAAK,EAAE,SAASqB,MAAMA,CAACT,MAAM,EAAE;MAC7B,OAAO,IAAI,CAACW,QAAQ,CAAC,CAAC,MAAMX,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACW,QAAQ,CAAC,CAAC,CAAC;IAChG;EACF,CAAC,EAAE;IACDhB,GAAG,EAAE,YAAY;IACjBP,KAAK,EAAE,SAASsB,UAAUA,CAACV,MAAM,EAAE;MACjC,OAAO,IAAI,CAACF,GAAG,CAACE,MAAM,CAACJ,MAAM,CAAC,CAAC,CAACe,QAAQ,CAAC,CAAC,CAAC,CAACd,QAAQ,CAAC,CAAC,IAAI,CAAC;IAC7D;EACF,CAAC,EAAE;IACDF,GAAG,EAAE,UAAU;IACfP,KAAK,EAAE,SAASS,QAAQA,CAAA,EAAG;MACzB,IAAI,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE;QAChB,OAAO+C,GAAG;MACZ;MAEA,OAAOtD,MAAM,CAAC,IAAI,CAACiB,QAAQ,CAAC,CAAC,CAAC;IAChC;EACF,CAAC,EAAE;IACDhB,GAAG,EAAE,UAAU;IACfP,KAAK,EAAE,SAASuB,QAAQA,CAAA,EAAG;MACzB,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;MAEnF,IAAI,CAACD,IAAI,EAAE;QACT,OAAO,IAAI,CAACvB,MAAM;MACpB;MAEA,IAAI,IAAI,CAACU,YAAY,CAAC,CAAC,EAAE;QACvB,OAAO,EAAE;MACX;MAEA,OAAOf,UAAU,CAAC,EAAE,CAACoD,MAAM,CAAC,IAAI,CAACP,OAAO,CAAC,CAAC,CAAC,CAACO,MAAM,CAAC,IAAI,CAACN,aAAa,CAAC,CAAC,EAAE,GAAG,CAAC,CAACM,MAAM,CAAC,IAAI,CAACL,aAAa,CAAC,CAAC,CAAC,CAAC,CAACkB,OAAO;IACrH;EACF,CAAC,CAAC,CAAC;EAEH,OAAOjC,aAAa;AACtB,CAAC,CAAC,CAAC;AACH,eAAe,SAASkC,cAAcA,CAAC9D,KAAK,EAAE;EAC5C;EACA;EACA,IAAIF,aAAa,CAAC,CAAC,EAAE;IACnB,OAAO,IAAI8B,aAAa,CAAC5B,KAAK,CAAC;EACjC;EAEA,OAAO,IAAID,aAAa,CAACC,KAAK,CAAC;AACjC;AACA;AACA;AACA;;AAEA,OAAO,SAASmB,OAAOA,CAAC4C,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAE;EACvD,IAAIF,MAAM,KAAK,EAAE,EAAE;IACjB,OAAO,EAAE;EACX;EAEA,IAAIG,YAAY,GAAGtE,UAAU,CAACmE,MAAM,CAAC;IACjCN,WAAW,GAAGS,YAAY,CAACT,WAAW;IACtCU,UAAU,GAAGD,YAAY,CAACC,UAAU;IACpC7B,UAAU,GAAG4B,YAAY,CAAC5B,UAAU;EAExC,IAAI8B,mBAAmB,GAAG,EAAE,CAACpB,MAAM,CAACgB,YAAY,CAAC,CAAChB,MAAM,CAACV,UAAU,CAAC;EACpE,IAAI+B,oBAAoB,GAAG,EAAE,CAACrB,MAAM,CAACS,WAAW,CAAC,CAACT,MAAM,CAACmB,UAAU,CAAC;EAEpE,IAAIF,SAAS,IAAI,CAAC,EAAE;IAClB;IACA,IAAIK,WAAW,GAAGhE,MAAM,CAACgC,UAAU,CAAC2B,SAAS,CAAC,CAAC;IAE/C,IAAIK,WAAW,IAAI,CAAC,EAAE;MACpB,IAAIC,eAAe,GAAGT,cAAc,CAACC,MAAM,CAAC,CAACrD,GAAG,CAAC,IAAI,CAACsC,MAAM,CAAC,GAAG,CAACwB,MAAM,CAACP,SAAS,CAAC,CAAC,CAACjB,MAAM,CAAC,EAAE,GAAGsB,WAAW,CAAC,CAAC;MAC7G,OAAOnD,OAAO,CAACoD,eAAe,CAAChD,QAAQ,CAAC,CAAC,EAAEyC,YAAY,EAAEC,SAAS,CAAC;IACrE;IAEA,IAAIA,SAAS,KAAK,CAAC,EAAE;MACnB,OAAOI,oBAAoB;IAC7B;IAEA,OAAO,EAAE,CAACrB,MAAM,CAACqB,oBAAoB,CAAC,CAACrB,MAAM,CAACgB,YAAY,CAAC,CAAChB,MAAM,CAACV,UAAU,CAACW,MAAM,CAACgB,SAAS,EAAE,GAAG,CAAC,CAACN,KAAK,CAAC,CAAC,EAAEM,SAAS,CAAC,CAAC;EAC3H;EAEA,IAAIG,mBAAmB,KAAK,IAAI,EAAE;IAChC,OAAOC,oBAAoB;EAC7B;EAEA,OAAO,EAAE,CAACrB,MAAM,CAACqB,oBAAoB,CAAC,CAACrB,MAAM,CAACoB,mBAAmB,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module"}