{"ast":null,"code":"var domToReact = require('./lib/dom-to-react');\nvar attributesToProps = require('./lib/attributes-to-props');\nvar htmlToDOM = require('html-dom-parser');\nvar domParserOptions = {\n  lowerCaseAttributeNames: false\n};\n\n/**\n * Converts HTML string to React elements.\n *\n * @param  {String}   html                    - HTML string.\n * @param  {Object}   [options]               - Parser options.\n * @param  {Object}   [options.htmlparser2]   - htmlparser2 options.\n * @param  {Object}   [options.library]       - Library for React, Preact, etc.\n * @param  {Function} [options.replace]       - Replace method.\n * @return {JSX.Element|JSX.Element[]|String} - React element(s), empty array, or string.\n */\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (html === '') {\n    return [];\n  }\n  options = options || {};\n  return domToReact(htmlToDOM(html, options.htmlparser2 || domParserOptions), options);\n}\nHTMLReactParser.domToReact = domToReact;\nHTMLReactParser.htmlToDOM = htmlToDOM;\nHTMLReactParser.attributesToProps = attributesToProps;\n\n// support CommonJS and ES Modules\nmodule.exports = HTMLReactParser;\nmodule.exports.default = HTMLReactParser;","map":{"version":3,"names":["domToReact","require","attributesToProps","htmlToDOM","domParserOptions","lowerCaseAttributeNames","HTMLReactParser","html","options","TypeError","htmlparser2","module","exports","default"],"sources":["D:/projects/CryptoIntel/node_modules/html-react-parser/index.js"],"sourcesContent":["var domToReact = require('./lib/dom-to-react');\nvar attributesToProps = require('./lib/attributes-to-props');\nvar htmlToDOM = require('html-dom-parser');\n\nvar domParserOptions = { lowerCaseAttributeNames: false };\n\n/**\n * Converts HTML string to React elements.\n *\n * @param  {String}   html                    - HTML string.\n * @param  {Object}   [options]               - Parser options.\n * @param  {Object}   [options.htmlparser2]   - htmlparser2 options.\n * @param  {Object}   [options.library]       - Library for React, Preact, etc.\n * @param  {Function} [options.replace]       - Replace method.\n * @return {JSX.Element|JSX.Element[]|String} - React element(s), empty array, or string.\n */\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (html === '') {\n    return [];\n  }\n  options = options || {};\n  return domToReact(\n    htmlToDOM(html, options.htmlparser2 || domParserOptions),\n    options\n  );\n}\n\nHTMLReactParser.domToReact = domToReact;\nHTMLReactParser.htmlToDOM = htmlToDOM;\nHTMLReactParser.attributesToProps = attributesToProps;\n\n// support CommonJS and ES Modules\nmodule.exports = HTMLReactParser;\nmodule.exports.default = HTMLReactParser;\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC9C,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AAC5D,IAAIE,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAE1C,IAAIG,gBAAgB,GAAG;EAAEC,uBAAuB,EAAE;AAAM,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,IAAI,EAAEC,OAAO,EAAE;EACtC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIE,SAAS,CAAC,iCAAiC,CAAC;EACxD;EACA,IAAIF,IAAI,KAAK,EAAE,EAAE;IACf,OAAO,EAAE;EACX;EACAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,OAAOR,UAAU,CACfG,SAAS,CAACI,IAAI,EAAEC,OAAO,CAACE,WAAW,IAAIN,gBAAgB,CAAC,EACxDI,OACF,CAAC;AACH;AAEAF,eAAe,CAACN,UAAU,GAAGA,UAAU;AACvCM,eAAe,CAACH,SAAS,GAAGA,SAAS;AACrCG,eAAe,CAACJ,iBAAiB,GAAGA,iBAAiB;;AAErD;AACAS,MAAM,CAACC,OAAO,GAAGN,eAAe;AAChCK,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script"}