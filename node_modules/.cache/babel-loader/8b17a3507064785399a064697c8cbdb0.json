{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n  const val = parseFloat(value.toString());\n  if (isNaN(val)) {\n    throw new Error(\"Input value is not a number\");\n  }\n  if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n    throw new RangeError(\"Input value is outside of safe integer range\");\n  }\n  return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Input value is not a finite number\");\n  }\n  if (!Number.isInteger(precision) || precision < 0) {\n    throw new Error(\"Precision is not a positive integer\");\n  }\n  if (Number.isInteger(value)) {\n    return value;\n  }\n  return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;","map":{"version":3,"names":["Object","defineProperty","exports","value","roundTo","parseValue","val","parseFloat","toString","isNaN","Error","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","RangeError","precision","isFinite","isInteger","toFixed"],"sources":["D:/projects/CryptoIntel/node_modules/millify/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n    const val = parseFloat(value.toString());\n    if (isNaN(val)) {\n        throw new Error(`Input value is not a number`);\n    }\n    if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n        throw new RangeError(\"Input value is outside of safe integer range\");\n    }\n    return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n    if (!Number.isFinite(value)) {\n        throw new Error(\"Input value is not a finite number\");\n    }\n    if (!Number.isInteger(precision) || precision < 0) {\n        throw new Error(\"Precision is not a positive integer\");\n    }\n    if (Number.isInteger(value)) {\n        return value;\n    }\n    return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AAC7C;AACA;AACA;AACA,SAASA,UAAUA,CAACF,KAAK,EAAE;EACvB,MAAMG,GAAG,GAAGC,UAAU,CAACJ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAC;EACxC,IAAIC,KAAK,CAACH,GAAG,CAAC,EAAE;IACZ,MAAM,IAAII,KAAK,8BAA8B,CAAC;EAClD;EACA,IAAIJ,GAAG,GAAGK,MAAM,CAACC,gBAAgB,IAAIN,GAAG,GAAGK,MAAM,CAACE,gBAAgB,EAAE;IAChE,MAAM,IAAIC,UAAU,CAAC,8CAA8C,CAAC;EACxE;EACA,OAAOR,GAAG;AACd;AACAJ,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA,SAASD,OAAOA,CAACD,KAAK,EAAEY,SAAS,EAAE;EAC/B,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAACb,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIO,KAAK,CAAC,oCAAoC,CAAC;EACzD;EACA,IAAI,CAACC,MAAM,CAACM,SAAS,CAACF,SAAS,CAAC,IAAIA,SAAS,GAAG,CAAC,EAAE;IAC/C,MAAM,IAAIL,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,IAAIC,MAAM,CAACM,SAAS,CAACd,KAAK,CAAC,EAAE;IACzB,OAAOA,KAAK;EAChB;EACA,OAAOI,UAAU,CAACJ,KAAK,CAACe,OAAO,CAACH,SAAS,CAAC,CAAC;AAC/C;AACAb,OAAO,CAACE,OAAO,GAAGA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script"}