{"ast":null,"code":"import * as React from 'react';\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nexport default function useKeyValueMap(flattenOptions) {\n  return React.useMemo(function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}","map":{"version":3,"names":["React","useKeyValueMap","flattenOptions","useMemo","cacheKeyMap","Map","cacheValueMap","forEach","dataNode","set","key","data","value"],"sources":["D:/projects/CryptoIntel/node_modules/rc-tree-select/es/hooks/useKeyValueMap.js"],"sourcesContent":["import * as React from 'react';\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nexport default function useKeyValueMap(flattenOptions) {\n  return React.useMemo(function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B;AACA;AACA;AACA;;AAEA,eAAe,SAASC,cAAcA,CAACC,cAAc,EAAE;EACrD,OAAOF,KAAK,CAACG,OAAO,CAAC,YAAY;IAC/B,IAAIC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC3B,IAAIC,aAAa,GAAG,IAAID,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE/BH,cAAc,CAACK,OAAO,CAAC,UAAUC,QAAQ,EAAE;MACzCJ,WAAW,CAACK,GAAG,CAACD,QAAQ,CAACE,GAAG,EAAEF,QAAQ,CAAC;MACvCF,aAAa,CAACG,GAAG,CAACD,QAAQ,CAACG,IAAI,CAACC,KAAK,EAAEJ,QAAQ,CAAC;IAClD,CAAC,CAAC;IACF,OAAO,CAACJ,WAAW,EAAEE,aAAa,CAAC;EACrC,CAAC,EAAE,CAACJ,cAAc,CAAC,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module"}