{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n  return decimalValue.toNumber();\n};\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n  var _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n    className = props.className,\n    style = props.style,\n    min = props.min,\n    max = props.max,\n    _props$step = props.step,\n    step = _props$step === void 0 ? 1 : _props$step,\n    defaultValue = props.defaultValue,\n    value = props.value,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    upHandler = props.upHandler,\n    downHandler = props.downHandler,\n    keyboard = props.keyboard,\n    stringMode = props.stringMode,\n    parser = props.parser,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    onChange = props.onChange,\n    onInput = props.onInput,\n    onPressEnter = props.onPressEnter,\n    onStep = props.onStep,\n    inputProps = _objectWithoutProperties(props, [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"]);\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focus = _React$useState2[0],\n    setFocus = _React$useState2[1];\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    decimalValue = _React$useState4[0],\n    setDecimalValue = _React$useState4[1];\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n    if (precision >= 0) {\n      return precision;\n    }\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n    if (parser) {\n      return parser(numStr);\n    }\n    var parsedStr = numStr;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number);\n    }\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n        return Number.isNaN(initValue) ? '' : initValue;\n      }\n      return mergedFormatter(decimalValue.toString(), false);\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    inputValue = _React$useState6[0],\n    setInternalInputValue = _React$useState6[1]; // Should always be string\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter(\n    // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n    _useCursor2 = _slicedToArray(_useCursor, 2),\n    recordCursor = _useCursor2[0],\n    restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n      return updateValue;\n    }\n    return decimalValue;\n  }; // ========================== User Input ==========================\n  // >>> Collect input value\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n  }; // >>> Composition\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n  var onInternalInput = function onInternalInput(e) {\n    var inputStr = e.target.value; // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    if (!parser) {\n      inputStr = inputStr.replace(/。/g, '.');\n    }\n    collectInputValue(inputStr); // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr);\n  }; // ============================= Step =============================\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n      flushInputValue(true);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (newValue.isNaN() || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, false);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;","map":{"version":3,"names":["_extends","_defineProperty","_typeof","_slicedToArray","_objectWithoutProperties","React","classNames","KeyCode","composeRef","getMiniDecimal","toFixed","StepHandler","getNumberPrecision","num2str","validateNumber","useCursor","useUpdateEffect","getDecimalValue","stringMode","decimalValue","isEmpty","toString","toNumber","getDecimalIfValidate","value","decimal","isInvalidate","InputNumber","forwardRef","props","ref","_classNames","_props$prefixCls","prefixCls","className","style","min","max","_props$step","step","defaultValue","disabled","readOnly","upHandler","downHandler","keyboard","parser","formatter","precision","decimalSeparator","onChange","onInput","onPressEnter","onStep","inputProps","inputClassName","concat","inputRef","useRef","_React$useState","useState","_React$useState2","focus","setFocus","userTypingRef","compositionRef","_React$useState3","_React$useState4","setDecimalValue","setUncontrolledDecimalValue","newDecimal","undefined","getPrecision","useCallback","numStr","userTyping","Math","mergedParser","num","String","parsedStr","replace","mergedFormatter","number","str","mergedPrecision","separatorStr","_React$useState5","initValue","includes","Number","isNaN","_React$useState6","inputValue","setInternalInputValue","setInputValue","newValue","maxDecimal","useMemo","minDecimal","upDisabled","lessEquals","downDisabled","_useCursor","current","_useCursor2","recordCursor","restoreCursor","getRangeValue","target","isInRange","triggerValueUpdate","updateValue","isRangeValidate","equals","collectInputValue","inputStr","finalValue","finalDecimal","onCompositionStart","onCompositionEnd","onInternalInput","e","onInternalStep","up","_inputRef$current","stepDecimal","negate","add","updatedValue","offset","type","flushInputValue","parsedValue","formatValue","onKeyDown","event","which","ENTER","UP","DOWN","preventDefault","onKeyUp","onBlur","createElement","onFocus","upNode","downNode","autoComplete","role","displayName"],"sources":["D:/projects/CryptoIntel/node_modules/rc-input-number/es/InputNumber.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { composeRef } from \"rc-util/es/ref\";\nimport getMiniDecimal, { toFixed } from './utils/MiniDecimal';\nimport StepHandler from './StepHandler';\nimport { getNumberPrecision, num2str, validateNumber } from './utils/numberUtil';\nimport useCursor from './hooks/useCursor';\nimport useUpdateEffect from './hooks/useUpdateEffect';\n/**\n * We support `stringMode` which need handle correct type when user call in onChange\n */\n\nvar getDecimalValue = function getDecimalValue(stringMode, decimalValue) {\n  if (stringMode || decimalValue.isEmpty()) {\n    return decimalValue.toString();\n  }\n\n  return decimalValue.toNumber();\n};\n\nvar getDecimalIfValidate = function getDecimalIfValidate(value) {\n  var decimal = getMiniDecimal(value);\n  return decimal.isInvalidate() ? null : decimal;\n};\n\nvar InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,\n      className = props.className,\n      style = props.style,\n      min = props.min,\n      max = props.max,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 1 : _props$step,\n      defaultValue = props.defaultValue,\n      value = props.value,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      upHandler = props.upHandler,\n      downHandler = props.downHandler,\n      keyboard = props.keyboard,\n      stringMode = props.stringMode,\n      parser = props.parser,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      onChange = props.onChange,\n      onInput = props.onInput,\n      onPressEnter = props.onPressEnter,\n      onStep = props.onStep,\n      inputProps = _objectWithoutProperties(props, [\"prefixCls\", \"className\", \"style\", \"min\", \"max\", \"step\", \"defaultValue\", \"value\", \"disabled\", \"readOnly\", \"upHandler\", \"downHandler\", \"keyboard\", \"stringMode\", \"parser\", \"formatter\", \"precision\", \"decimalSeparator\", \"onChange\", \"onInput\", \"onPressEnter\", \"onStep\"]);\n\n  var inputClassName = \"\".concat(prefixCls, \"-input\");\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focus = _React$useState2[0],\n      setFocus = _React$useState2[1];\n\n  var userTypingRef = React.useRef(false);\n  var compositionRef = React.useRef(false); // ============================ Value =============================\n  // Real value control\n\n  var _React$useState3 = React.useState(function () {\n    return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      decimalValue = _React$useState4[0],\n      setDecimalValue = _React$useState4[1];\n\n  function setUncontrolledDecimalValue(newDecimal) {\n    if (value === undefined) {\n      setDecimalValue(newDecimal);\n    }\n  } // ====================== Parser & Formatter ======================\n\n  /**\n   * `precision` is used for formatter & onChange.\n   * It will auto generate by `value` & `step`.\n   * But it will not block user typing.\n   *\n   * Note: Auto generate `precision` is used for legacy logic.\n   * We should remove this since we already support high precision with BigInt.\n   *\n   * @param number  Provide which number should calculate precision\n   * @param userTyping  Change by user typing\n   */\n\n\n  var getPrecision = React.useCallback(function (numStr, userTyping) {\n    if (userTyping) {\n      return undefined;\n    }\n\n    if (precision >= 0) {\n      return precision;\n    }\n\n    return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));\n  }, [precision, step]); // >>> Parser\n\n  var mergedParser = React.useCallback(function (num) {\n    var numStr = String(num);\n\n    if (parser) {\n      return parser(numStr);\n    }\n\n    var parsedStr = numStr;\n\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(decimalSeparator, '.');\n    } // [Legacy] We still support auto convert `$ 123,456` to `123456`\n\n\n    return parsedStr.replace(/[^\\w.-]+/g, '');\n  }, [parser, decimalSeparator]); // >>> Formatter\n\n  var mergedFormatter = React.useCallback(function (number, userTyping) {\n    if (formatter) {\n      return formatter(number);\n    }\n\n    var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly\n\n    if (!userTyping) {\n      var mergedPrecision = getPrecision(str, userTyping);\n\n      if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {\n        // Separator\n        var separatorStr = decimalSeparator || '.';\n        str = toFixed(str, separatorStr, mergedPrecision);\n      }\n    }\n\n    return str;\n  }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================\n\n  /**\n   * Input text value control\n   *\n   * User can not update input content directly. It update with follow rules by priority:\n   *  1. controlled `value` changed\n   *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`\n   *  2. User typing with format (not precision)\n   *  3. Blur or Enter trigger revalidate\n   */\n\n  var _React$useState5 = React.useState(function () {\n    var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;\n\n    if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof(initValue))) {\n      return Number.isNaN(initValue) ? '' : initValue;\n    }\n\n    return mergedFormatter(decimalValue.toString(), false);\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      inputValue = _React$useState6[0],\n      setInternalInputValue = _React$useState6[1]; // Should always be string\n\n\n  function setInputValue(newValue, userTyping) {\n    setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go\n    // Otherwise is controlled by internal interactive logic which check by userTyping\n    // You can ref 'show limited value when input is not focused' test for more info.\n    newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));\n  } // >>> Max & Min limit\n\n\n  var maxDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(max);\n  }, [max]);\n  var minDecimal = React.useMemo(function () {\n    return getDecimalIfValidate(min);\n  }, [min]);\n  var upDisabled = React.useMemo(function () {\n    if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return maxDecimal.lessEquals(decimalValue);\n  }, [maxDecimal, decimalValue]);\n  var downDisabled = React.useMemo(function () {\n    if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {\n      return false;\n    }\n\n    return decimalValue.lessEquals(minDecimal);\n  }, [minDecimal, decimalValue]); // Cursor controller\n\n  var _useCursor = useCursor(inputRef.current, focus),\n      _useCursor2 = _slicedToArray(_useCursor, 2),\n      recordCursor = _useCursor2[0],\n      restoreCursor = _useCursor2[1]; // ============================= Data =============================\n\n  /**\n   * Find target value closet within range.\n   * e.g. [11, 28]:\n   *    3  => 11\n   *    23 => 23\n   *    99 => 28\n   */\n\n\n  var getRangeValue = function getRangeValue(target) {\n    // target > max\n    if (maxDecimal && !target.lessEquals(maxDecimal)) {\n      return maxDecimal;\n    } // target < min\n\n\n    if (minDecimal && !minDecimal.lessEquals(target)) {\n      return minDecimal;\n    }\n\n    return null;\n  };\n  /**\n   * Check value is in [min, max] range\n   */\n\n\n  var isInRange = function isInRange(target) {\n    return !getRangeValue(target);\n  };\n  /**\n   * Trigger `onChange` if value validated and not equals of origin.\n   * Return the value that re-align in range.\n   */\n\n\n  var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {\n    var updateValue = newValue;\n    var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.\n    // We just trigger onChange(null)\n    // This should not block user typing\n\n    if (!updateValue.isEmpty() && !userTyping) {\n      // Revert value in range if needed\n      updateValue = getRangeValue(updateValue) || updateValue;\n      isRangeValidate = true;\n    }\n\n    if (!readOnly && !disabled && isRangeValidate) {\n      var numStr = updateValue.toString();\n      var mergedPrecision = getPrecision(numStr, userTyping);\n\n      if (mergedPrecision >= 0) {\n        updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));\n      } // Trigger event\n\n\n      if (!updateValue.equals(decimalValue)) {\n        setUncontrolledDecimalValue(updateValue);\n        onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled\n\n        if (value === undefined) {\n          setInputValue(updateValue, userTyping);\n        }\n      }\n\n      return updateValue;\n    }\n\n    return decimalValue;\n  }; // ========================== User Input ==========================\n  // >>> Collect input value\n\n\n  var collectInputValue = function collectInputValue(inputStr) {\n    recordCursor(); // Update inputValue incase input can not parse as number\n\n    setInternalInputValue(inputStr); // Parse number\n\n    if (!compositionRef.current) {\n      var finalValue = mergedParser(inputStr);\n      var finalDecimal = getMiniDecimal(finalValue);\n\n      if (!finalDecimal.isNaN()) {\n        triggerValueUpdate(finalDecimal, true);\n      }\n    }\n  }; // >>> Composition\n\n\n  var onCompositionStart = function onCompositionStart() {\n    compositionRef.current = true;\n  };\n\n  var onCompositionEnd = function onCompositionEnd() {\n    compositionRef.current = false;\n    collectInputValue(inputRef.current.value);\n  }; // >>> Input\n\n\n  var onInternalInput = function onInternalInput(e) {\n    var inputStr = e.target.value; // optimize for chinese input experience\n    // https://github.com/ant-design/ant-design/issues/8196\n\n    if (!parser) {\n      inputStr = inputStr.replace(/。/g, '.');\n    }\n\n    collectInputValue(inputStr); // Trigger onInput later to let user customize value if they want do handle something after onChange\n\n    onInput === null || onInput === void 0 ? void 0 : onInput(inputStr);\n  }; // ============================= Step =============================\n\n\n  var onInternalStep = function onInternalStep(up) {\n    var _inputRef$current;\n\n    // Ignore step since out of range\n    if (up && upDisabled || !up && downDisabled) {\n      return;\n    } // Clear typing status since it may caused by up & down key.\n    // We should sync with input value.\n\n\n    userTypingRef.current = false;\n    var stepDecimal = getMiniDecimal(step);\n\n    if (!up) {\n      stepDecimal = stepDecimal.negate();\n    }\n\n    var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());\n    var updatedValue = triggerValueUpdate(target, false);\n    onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {\n      offset: step,\n      type: up ? 'up' : 'down'\n    });\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }; // ============================ Flush =============================\n\n  /**\n   * Flush current input content to trigger value change & re-formatter input if needed\n   */\n\n\n  var flushInputValue = function flushInputValue(userTyping) {\n    var parsedValue = getMiniDecimal(mergedParser(inputValue));\n    var formatValue = parsedValue;\n\n    if (!parsedValue.isNaN()) {\n      // Only validate value or empty value can be re-fill to inputValue\n      // Reassign the formatValue within ranged of trigger control\n      formatValue = triggerValueUpdate(parsedValue, userTyping);\n    } else {\n      formatValue = decimalValue;\n    }\n\n    if (value !== undefined) {\n      // Reset back with controlled value first\n      setInputValue(decimalValue, false);\n    } else if (!formatValue.isNaN()) {\n      // Reset input back since no validate value\n      setInputValue(formatValue, false);\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    var which = event.which;\n    userTypingRef.current = true;\n\n    if (which === KeyCode.ENTER) {\n      if (!compositionRef.current) {\n        userTypingRef.current = false;\n      }\n\n      flushInputValue(true);\n      onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);\n    }\n\n    if (keyboard === false) {\n      return;\n    } // Do step\n\n\n    if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {\n      onInternalStep(KeyCode.UP === which);\n      event.preventDefault();\n    }\n  };\n\n  var onKeyUp = function onKeyUp() {\n    userTypingRef.current = false;\n  }; // >>> Focus & Blur\n\n\n  var onBlur = function onBlur() {\n    flushInputValue(false);\n    setFocus(false);\n    userTypingRef.current = false;\n  }; // ========================== Controlled ==========================\n  // Input by precision\n\n\n  useUpdateEffect(function () {\n    if (!decimalValue.isInvalidate()) {\n      setInputValue(decimalValue, false);\n    }\n  }, [precision]); // Input by value\n\n  useUpdateEffect(function () {\n    var newValue = getMiniDecimal(value);\n    setDecimalValue(newValue); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.\n    // But let it go if user set `formatter`\n\n    if (newValue.isNaN() || !userTypingRef.current || formatter) {\n      // Update value as effect\n      setInputValue(newValue, false);\n    }\n  }, [value]); // ============================ Cursor ============================\n\n  useUpdateEffect(function () {\n    if (formatter) {\n      restoreCursor();\n    }\n  }, [inputValue]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-focused\"), focus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(prefixCls, \"-readonly\"), readOnly), _defineProperty(_classNames, \"\".concat(prefixCls, \"-not-a-number\"), decimalValue.isNaN()), _defineProperty(_classNames, \"\".concat(prefixCls, \"-out-of-range\"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),\n    style: style,\n    onFocus: function onFocus() {\n      setFocus(true);\n    },\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd\n  }, /*#__PURE__*/React.createElement(StepHandler, {\n    prefixCls: prefixCls,\n    upNode: upHandler,\n    downNode: downHandler,\n    upDisabled: upDisabled,\n    downDisabled: downDisabled,\n    onStep: onInternalStep\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(inputClassName, \"-wrap\")\n  }, /*#__PURE__*/React.createElement(\"input\", _extends({\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": decimalValue.isInvalidate() ? null : decimalValue.toString(),\n    step: step\n  }, inputProps, {\n    ref: composeRef(inputRef, ref),\n    className: inputClassName,\n    value: inputValue,\n    onChange: onInternalInput,\n    disabled: disabled,\n    readOnly: readOnly\n  }))));\n});\nInputNumber.displayName = 'InputNumber';\nexport default InputNumber;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}