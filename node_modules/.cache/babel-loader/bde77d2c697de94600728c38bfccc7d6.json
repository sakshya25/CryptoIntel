{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n        children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = _objectWithoutProperties(_treeNode$props, _excluded);\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  // Init config\n  var externalGetKey = null;\n  var childrenPropName;\n  var configType = _typeof(config);\n  if (configType === 'function' || configType === 'string') {\n    // Legacy getKey param\n    externalGetKey = config;\n  } else if (config && configType === 'object') {\n    childrenPropName = config.childrenPropName;\n    externalGetKey = config.externalGetKey;\n  }\n  childrenPropName = childrenPropName || 'children'; // Get keys\n\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  } // Process\n\n  function processNode(node, index, parent) {\n    var children = node ? node[childrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref.initWrapper,\n    processEntity = _ref.processEntity,\n    onProcessFinished = _ref.onProcessFinished,\n    externalGetKey = _ref.externalGetKey,\n    childrenPropName = _ref.childrenPropName;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n    selectedKeys = _ref2.selectedKeys,\n    loadedKeys = _ref2.loadedKeys,\n    loadingKeys = _ref2.loadingKeys,\n    checkedKeys = _ref2.checkedKeys,\n    halfCheckedKeys = _ref2.halfCheckedKeys,\n    dragOverNodeKey = _ref2.dragOverNodeKey,\n    dropPosition = _ref2.dropPosition,\n    keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active;\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","toArray","warning","getPosition","isTreeNode","getKey","key","pos","undefined","warningWithoutKey","treeData","arguments","length","keys","Map","dig","list","path","forEach","treeNode","children","concat","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","flattenTreeData","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","mergedKey","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","externalGetKey","childrenPropName","configType","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","convertDataToEntities","_ref","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","Object","defineProperty","get"],"sources":["D:/projects/CryptoIntel/node_modules/rc-tree/es/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport { getPosition, isTreeNode } from '../util';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, _excluded);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  // Init config\n  var externalGetKey = null;\n  var childrenPropName;\n\n  var configType = _typeof(config);\n\n  if (configType === 'function' || configType === 'string') {\n    // Legacy getKey param\n    externalGetKey = config;\n  } else if (config && configType === 'object') {\n    childrenPropName = config.childrenPropName;\n    externalGetKey = config.externalGetKey;\n  }\n\n  childrenPropName = childrenPropName || 'children'; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent) {\n    var children = node ? node[childrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished,\n      externalGetKey = _ref.externalGetKey,\n      childrenPropName = _ref.childrenPropName;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,mCAAmC;AACvD,OAAOC,kBAAkB,MAAM,8CAA8C;AAC7E,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,wBAAwB,MAAM,oDAAoD;AACzF,IAAIC,SAAS,GAAG,CAAC,UAAU,CAAC;AAC5B,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAASC,WAAW,EAAEC,UAAU,QAAQ,SAAS;AACjD,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/B,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACrC,OAAOF,GAAG;EACZ;EAEA,OAAOC,GAAG;AACZ;AACA;AACA;AACA;;AAEA,OAAO,SAASE,iBAAiBA,CAAA,EAAG;EAClC,IAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACrF,IAAIE,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEpB,SAASC,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIC,IAAI,GAAGN,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,CAACK,IAAI,IAAI,EAAE,EAAEE,OAAO,CAAC,UAAUC,QAAQ,EAAE;MACvC,IAAIb,GAAG,GAAGa,QAAQ,CAACb,GAAG;QAClBc,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MAChClB,OAAO,CAACI,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE,sCAAsC,CAACa,MAAM,CAACJ,IAAI,CAAC,CAACI,MAAM,CAACf,GAAG,EAAE,GAAG,CAAC,CAAC;MAChH,IAAIgB,SAAS,GAAGC,MAAM,CAACjB,GAAG,CAAC;MAC3BJ,OAAO,CAAC,CAACW,IAAI,CAACW,GAAG,CAACF,SAAS,CAAC,IAAIhB,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE,gCAAgC,CAACa,MAAM,CAACC,SAAS,CAAC,CAAC;MACtHT,IAAI,CAACY,GAAG,CAACH,SAAS,EAAE,IAAI,CAAC;MACzBP,GAAG,CAACK,QAAQ,EAAE,EAAE,CAACC,MAAM,CAACJ,IAAI,CAAC,CAACI,MAAM,CAACC,SAAS,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;EACJ;EAEAP,GAAG,CAACL,QAAQ,CAAC;AACf;AACA;AACA;AACA;;AAEA,OAAO,SAASgB,iBAAiBA,CAACC,SAAS,EAAE;EAC3C,SAASZ,GAAGA,CAACa,IAAI,EAAE;IACjB,IAAIC,SAAS,GAAG5B,OAAO,CAAC2B,IAAI,CAAC;IAC7B,OAAOC,SAAS,CAACC,GAAG,CAAC,UAAUX,QAAQ,EAAE;MACvC;MACA,IAAI,CAACf,UAAU,CAACe,QAAQ,CAAC,EAAE;QACzBjB,OAAO,CAAC,CAACiB,QAAQ,EAAE,qDAAqD,CAAC;QACzE,OAAO,IAAI;MACb;MAEA,IAAIb,GAAG,GAAGa,QAAQ,CAACb,GAAG;MAEtB,IAAIyB,eAAe,GAAGZ,QAAQ,CAACa,KAAK;QAChCZ,QAAQ,GAAGW,eAAe,CAACX,QAAQ;QACnCa,IAAI,GAAGlC,wBAAwB,CAACgC,eAAe,EAAE/B,SAAS,CAAC;MAE/D,IAAIkC,QAAQ,GAAGpC,aAAa,CAAC;QAC3BQ,GAAG,EAAEA;MACP,CAAC,EAAE2B,IAAI,CAAC;MAER,IAAIE,cAAc,GAAGpB,GAAG,CAACK,QAAQ,CAAC;MAElC,IAAIe,cAAc,CAACvB,MAAM,EAAE;QACzBsB,QAAQ,CAACd,QAAQ,GAAGe,cAAc;MACpC;MAEA,OAAOD,QAAQ;IACjB,CAAC,CAAC,CAACE,MAAM,CAAC,UAAUF,QAAQ,EAAE;MAC5B,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ;EAEA,OAAOnB,GAAG,CAACY,SAAS,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASU,eAAeA,CAAA,EAAG;EAChC,IAAIC,YAAY,GAAG3B,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACzF,IAAI4B,YAAY,GAAG5B,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;EACzF,IAAI6B,cAAc,GAAG,IAAIC,GAAG,CAACF,YAAY,KAAK,IAAI,GAAG,EAAE,GAAGA,YAAY,CAAC;EACvE,IAAIG,WAAW,GAAG,EAAE;EAEpB,SAAS3B,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAI2B,MAAM,GAAGhC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACrF,OAAOK,IAAI,CAACc,GAAG,CAAC,UAAUX,QAAQ,EAAEyB,KAAK,EAAE;MACzC,IAAIrC,GAAG,GAAGJ,WAAW,CAACwC,MAAM,GAAGA,MAAM,CAACpC,GAAG,GAAG,GAAG,EAAEqC,KAAK,CAAC;MACvD,IAAIC,SAAS,GAAGxC,MAAM,CAACc,QAAQ,CAACb,GAAG,EAAEC,GAAG,CAAC,CAAC,CAAC;;MAE3C,IAAIuC,WAAW,GAAGhD,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEqB,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;QAC/DwB,MAAM,EAAEA,MAAM;QACdpC,GAAG,EAAEA,GAAG;QACRa,QAAQ,EAAE,IAAI;QACd2B,IAAI,EAAE5B,QAAQ;QACd6B,OAAO,EAAE,EAAE,CAAC3B,MAAM,CAACxB,kBAAkB,CAAC8C,MAAM,GAAGA,MAAM,CAACK,OAAO,GAAG,EAAE,CAAC,EAAE,CAACJ,KAAK,KAAK,CAAC,CAAC,CAAC;QACnFK,KAAK,EAAE,EAAE,CAAC5B,MAAM,CAACxB,kBAAkB,CAAC8C,MAAM,GAAGA,MAAM,CAACM,KAAK,GAAG,EAAE,CAAC,EAAE,CAACL,KAAK,KAAK5B,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC;MAC9F,CAAC,CAAC;MAEF8B,WAAW,CAACQ,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC;;MAE/B,IAAIP,YAAY,KAAK,IAAI,IAAIC,cAAc,CAAChB,GAAG,CAACqB,SAAS,CAAC,EAAE;QAC1DC,WAAW,CAAC1B,QAAQ,GAAGL,GAAG,CAACI,QAAQ,CAACC,QAAQ,IAAI,EAAE,EAAE0B,WAAW,CAAC;MAClE,CAAC,MAAM;QACLA,WAAW,CAAC1B,QAAQ,GAAG,EAAE;MAC3B;MAEA,OAAO0B,WAAW;IACpB,CAAC,CAAC;EACJ;EAEA/B,GAAG,CAACuB,YAAY,CAAC;EACjB,OAAOI,WAAW;AACpB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASS,iBAAiBA,CAACC,SAAS,EAAEC,QAAQ;AAAE;AACvDC,MAAM,EAAE;EACN;EACA,IAAIC,cAAc,GAAG,IAAI;EACzB,IAAIC,gBAAgB;EAEpB,IAAIC,UAAU,GAAG7D,OAAO,CAAC0D,MAAM,CAAC;EAEhC,IAAIG,UAAU,KAAK,UAAU,IAAIA,UAAU,KAAK,QAAQ,EAAE;IACxD;IACAF,cAAc,GAAGD,MAAM;EACzB,CAAC,MAAM,IAAIA,MAAM,IAAIG,UAAU,KAAK,QAAQ,EAAE;IAC5CD,gBAAgB,GAAGF,MAAM,CAACE,gBAAgB;IAC1CD,cAAc,GAAGD,MAAM,CAACC,cAAc;EACxC;EAEAC,gBAAgB,GAAGA,gBAAgB,IAAI,UAAU,CAAC,CAAC;;EAEnD,IAAIE,eAAe;EAEnB,IAAIH,cAAc,EAAE;IAClB,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;MACtCG,eAAe,GAAG,SAASA,eAAeA,CAAC9B,IAAI,EAAE;QAC/C,OAAOA,IAAI,CAAC2B,cAAc,CAAC;MAC7B,CAAC;IACH,CAAC,MAAM,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;MAC/CG,eAAe,GAAG,SAASA,eAAeA,CAAC9B,IAAI,EAAE;QAC/C,OAAO2B,cAAc,CAAC3B,IAAI,CAAC;MAC7B,CAAC;IACH;EACF,CAAC,MAAM;IACL8B,eAAe,GAAG,SAASA,eAAeA,CAAC9B,IAAI,EAAErB,GAAG,EAAE;MACpD,OAAOF,MAAM,CAACuB,IAAI,CAACtB,GAAG,EAAEC,GAAG,CAAC;IAC9B,CAAC;EACH,CAAC,CAAC;;EAGF,SAASoD,WAAWA,CAAC/B,IAAI,EAAEgB,KAAK,EAAED,MAAM,EAAE;IACxC,IAAIvB,QAAQ,GAAGQ,IAAI,GAAGA,IAAI,CAAC4B,gBAAgB,CAAC,GAAGJ,SAAS;IACxD,IAAI7C,GAAG,GAAGqB,IAAI,GAAGzB,WAAW,CAACwC,MAAM,CAACpC,GAAG,EAAEqC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;;IAEvD,IAAIhB,IAAI,EAAE;MACR,IAAItB,GAAG,GAAGoD,eAAe,CAAC9B,IAAI,EAAErB,GAAG,CAAC;MACpC,IAAIwC,IAAI,GAAG;QACTnB,IAAI,EAAEA,IAAI;QACVgB,KAAK,EAAEA,KAAK;QACZrC,GAAG,EAAEA,GAAG;QACRD,GAAG,EAAEA,GAAG;QACRsD,SAAS,EAAEjB,MAAM,CAACf,IAAI,GAAGe,MAAM,CAACpC,GAAG,GAAG,IAAI;QAC1CsD,KAAK,EAAElB,MAAM,CAACkB,KAAK,GAAG;MACxB,CAAC;MACDR,QAAQ,CAACN,IAAI,CAAC;IAChB,CAAC,CAAC;;IAGF,IAAI3B,QAAQ,EAAE;MACZA,QAAQ,CAACF,OAAO,CAAC,UAAU4C,OAAO,EAAEC,QAAQ,EAAE;QAC5CJ,WAAW,CAACG,OAAO,EAAEC,QAAQ,EAAE;UAC7BnC,IAAI,EAAEA,IAAI;UACVrB,GAAG,EAAEA,GAAG;UACRsD,KAAK,EAAElB,MAAM,GAAGA,MAAM,CAACkB,KAAK,GAAG,CAAC,GAAG,CAAC;QACtC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;EAEAF,WAAW,CAAC,IAAI,CAAC;AACnB;AACA;AACA;AACA;;AAEA,OAAO,SAASK,qBAAqBA,CAACZ,SAAS,EAAE;EAC/C,IAAIa,IAAI,GAAGtD,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKH,SAAS,GAAGG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7EuD,WAAW,GAAGD,IAAI,CAACC,WAAW;IAC9BC,aAAa,GAAGF,IAAI,CAACE,aAAa;IAClCC,iBAAiB,GAAGH,IAAI,CAACG,iBAAiB;IAC1Cb,cAAc,GAAGU,IAAI,CAACV,cAAc;IACpCC,gBAAgB,GAAGS,IAAI,CAACT,gBAAgB;EAE5C,IACA;EACAa,oBAAoB,GAAG1D,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGH,SAAS;EACtE;EACA,IAAI8D,oBAAoB,GAAGf,cAAc,IAAIc,oBAAoB;EACjE,IAAIE,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIC,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIC,OAAO,GAAG;IACZF,WAAW,EAAEA,WAAW;IACxBC,WAAW,EAAEA;EACf,CAAC;EAED,IAAIN,WAAW,EAAE;IACfO,OAAO,GAAGP,WAAW,CAACO,OAAO,CAAC,IAAIA,OAAO;EAC3C;EAEAtB,iBAAiB,CAACC,SAAS,EAAE,UAAUsB,IAAI,EAAE;IAC3C,IAAI9C,IAAI,GAAG8C,IAAI,CAAC9C,IAAI;MAChBgB,KAAK,GAAG8B,IAAI,CAAC9B,KAAK;MAClBrC,GAAG,GAAGmE,IAAI,CAACnE,GAAG;MACdD,GAAG,GAAGoE,IAAI,CAACpE,GAAG;MACdsD,SAAS,GAAGc,IAAI,CAACd,SAAS;MAC1BC,KAAK,GAAGa,IAAI,CAACb,KAAK;IACtB,IAAIc,MAAM,GAAG;MACX/C,IAAI,EAAEA,IAAI;MACVgB,KAAK,EAAEA,KAAK;MACZtC,GAAG,EAAEA,GAAG;MACRC,GAAG,EAAEA,GAAG;MACRsD,KAAK,EAAEA;IACT,CAAC;IACD,IAAIhB,SAAS,GAAGxC,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC;IAChCgE,WAAW,CAAChE,GAAG,CAAC,GAAGoE,MAAM;IACzBH,WAAW,CAAC3B,SAAS,CAAC,GAAG8B,MAAM,CAAC,CAAC;;IAEjCA,MAAM,CAAChC,MAAM,GAAG4B,WAAW,CAACX,SAAS,CAAC;IAEtC,IAAIe,MAAM,CAAChC,MAAM,EAAE;MACjBgC,MAAM,CAAChC,MAAM,CAACvB,QAAQ,GAAGuD,MAAM,CAAChC,MAAM,CAACvB,QAAQ,IAAI,EAAE;MACrDuD,MAAM,CAAChC,MAAM,CAACvB,QAAQ,CAAC8B,IAAI,CAACyB,MAAM,CAAC;IACrC;IAEA,IAAIR,aAAa,EAAE;MACjBA,aAAa,CAACQ,MAAM,EAAEF,OAAO,CAAC;IAChC;EACF,CAAC,EAAE;IACDlB,cAAc,EAAEe,oBAAoB;IACpCd,gBAAgB,EAAEA;EACpB,CAAC,CAAC;EAEF,IAAIY,iBAAiB,EAAE;IACrBA,iBAAiB,CAACK,OAAO,CAAC;EAC5B;EAEA,OAAOA,OAAO;AAChB;AACA;AACA;AACA;;AAEA,OAAO,SAASG,gBAAgBA,CAACtE,GAAG,EAAEuE,KAAK,EAAE;EAC3C,IAAItC,YAAY,GAAGsC,KAAK,CAACtC,YAAY;IACjCuC,YAAY,GAAGD,KAAK,CAACC,YAAY;IACjCC,UAAU,GAAGF,KAAK,CAACE,UAAU;IAC7BC,WAAW,GAAGH,KAAK,CAACG,WAAW;IAC/BC,WAAW,GAAGJ,KAAK,CAACI,WAAW;IAC/BC,eAAe,GAAGL,KAAK,CAACK,eAAe;IACvCC,eAAe,GAAGN,KAAK,CAACM,eAAe;IACvCC,YAAY,GAAGP,KAAK,CAACO,YAAY;IACjCZ,WAAW,GAAGK,KAAK,CAACL,WAAW;EACnC,IAAIG,MAAM,GAAGH,WAAW,CAAClE,GAAG,CAAC;EAC7B,IAAI+E,aAAa,GAAG;IAClBC,QAAQ,EAAEhF,GAAG;IACbiF,QAAQ,EAAEhD,YAAY,CAACiD,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1CmF,QAAQ,EAAEX,YAAY,CAACU,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1CoF,MAAM,EAAEX,UAAU,CAACS,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IACtCqF,OAAO,EAAEX,WAAW,CAACQ,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IACxCsF,OAAO,EAAEX,WAAW,CAACO,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IACxCuF,WAAW,EAAEX,eAAe,CAACM,OAAO,CAAClF,GAAG,CAAC,KAAK,CAAC,CAAC;IAChDC,GAAG,EAAEgB,MAAM,CAACoD,MAAM,GAAGA,MAAM,CAACpE,GAAG,GAAG,EAAE,CAAC;IACrC;IACA;IACA;IACAuF,QAAQ,EAAEX,eAAe,KAAK7E,GAAG,IAAI8E,YAAY,KAAK,CAAC;IACvDW,cAAc,EAAEZ,eAAe,KAAK7E,GAAG,IAAI8E,YAAY,KAAK,CAAC,CAAC;IAC9DY,iBAAiB,EAAEb,eAAe,KAAK7E,GAAG,IAAI8E,YAAY,KAAK;EACjE,CAAC;EACD,OAAOC,aAAa;AACtB;AACA,OAAO,SAASY,2BAA2BA,CAACjE,KAAK,EAAE;EACjD,IAAIe,IAAI,GAAGf,KAAK,CAACe,IAAI;IACjBwC,QAAQ,GAAGvD,KAAK,CAACuD,QAAQ;IACzBE,QAAQ,GAAGzD,KAAK,CAACyD,QAAQ;IACzBG,OAAO,GAAG5D,KAAK,CAAC4D,OAAO;IACvBF,MAAM,GAAG1D,KAAK,CAAC0D,MAAM;IACrBC,OAAO,GAAG3D,KAAK,CAAC2D,OAAO;IACvBE,WAAW,GAAG7D,KAAK,CAAC6D,WAAW;IAC/BC,QAAQ,GAAG9D,KAAK,CAAC8D,QAAQ;IACzBC,cAAc,GAAG/D,KAAK,CAAC+D,cAAc;IACrCC,iBAAiB,GAAGhE,KAAK,CAACgE,iBAAiB;IAC3CzF,GAAG,GAAGyB,KAAK,CAACzB,GAAG;IACf2F,MAAM,GAAGlE,KAAK,CAACkE,MAAM;EAEzB,IAAIC,SAAS,GAAGrG,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEiD,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE;IACzDwC,QAAQ,EAAEA,QAAQ;IAClBE,QAAQ,EAAEA,QAAQ;IAClBG,OAAO,EAAEA,OAAO;IAChBF,MAAM,EAAEA,MAAM;IACdC,OAAO,EAAEA,OAAO;IAChBE,WAAW,EAAEA,WAAW;IACxBC,QAAQ,EAAEA,QAAQ;IAClBC,cAAc,EAAEA,cAAc;IAC9BC,iBAAiB,EAAEA,iBAAiB;IACpCzF,GAAG,EAAEA,GAAG;IACR2F,MAAM,EAAEA;EACV,CAAC,CAAC;EAEF,IAAI,EAAE,OAAO,IAAIC,SAAS,CAAC,EAAE;IAC3BC,MAAM,CAACC,cAAc,CAACF,SAAS,EAAE,OAAO,EAAE;MACxCG,GAAG,EAAE,SAASA,GAAGA,CAAA,EAAG;QAClBpG,OAAO,CAAC,KAAK,EAAE,uIAAuI,CAAC;QACvJ,OAAO8B,KAAK;MACd;IACF,CAAC,CAAC;EACJ;EAEA,OAAOmE,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}