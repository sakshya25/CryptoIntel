{"ast":null,"code":"// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\nvar parseFromString = function () {\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n    return domParser.parseFromString(html, mimeType);\n  };\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  var isIE = require('./utilities').isIE;\n\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(isIE() ? 'html-dom-parser' : undefined);\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n  var doc;\n  var element;\n  var elements;\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n      return doc.getElementsByTagName(HTML);\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0].childNodes;\n  }\n}\nmodule.exports = domparser;","map":{"version":3,"names":["HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","document","implementation","isIE","require","doc","createHTMLDocument","undefined","documentElement","getElementsByTagName","innerHTML","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"sources":["D:/projects/CryptoIntel/node_modules/html-dom-parser/lib/client/domparser.js"],"sourcesContent":["// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n  var mimeType = 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  var isIE = require('./utilities').isIE;\n\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE() ? 'html-dom-parser' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    doc.documentElement.innerHTML = html;\n    return doc;\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string}   html - HTML markup.\n * @return {NodeList}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}