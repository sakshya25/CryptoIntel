{"ast":null,"code":"var reactProperty = require('react-property');\nvar utilities = require('./utilities');\nvar setStyleProp = utilities.setStyleProp;\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] = property.hasBooleanValue || property.hasOverloadedBooleanValue && !attributeValue ? true : attributeValue;\n      continue;\n    }\n\n    // convert SVG attribute to React prop\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  setStyleProp(attributes.style, props);\n  return props;\n}\nmodule.exports = attributesToProps;","map":{"version":3,"names":["reactProperty","require","utilities","setStyleProp","htmlProperties","html","svgProperties","svg","isCustomAttribute","hasOwnProperty","Object","prototype","attributesToProps","attributes","attributeName","attributeNameLowerCased","attributeValue","property","props","toLowerCase","call","propertyName","hasBooleanValue","hasOverloadedBooleanValue","PRESERVE_CUSTOM_ATTRIBUTES","style","module","exports"],"sources":["D:/projects/CryptoIntel/node_modules/html-react-parser/lib/attributes-to-props.js"],"sourcesContent":["var reactProperty = require('react-property');\nvar utilities = require('./utilities');\n\nvar setStyleProp = utilities.setStyleProp;\n\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] =\n        property.hasBooleanValue ||\n        (property.hasOverloadedBooleanValue && !attributeValue)\n          ? true\n          : attributeValue;\n      continue;\n    }\n\n    // convert SVG attribute to React prop\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  setStyleProp(attributes.style, props);\n\n  return props;\n}\n\nmodule.exports = attributesToProps;\n"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC7C,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIE,YAAY,GAAGD,SAAS,CAACC,YAAY;AAEzC,IAAIC,cAAc,GAAGJ,aAAa,CAACK,IAAI;AACvC,IAAIC,aAAa,GAAGN,aAAa,CAACO,GAAG;AACrC,IAAIC,iBAAiB,GAAGR,aAAa,CAACQ,iBAAiB;AAEvD,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,iBAAiBA,CAACC,UAAU,EAAE;EACrCA,UAAU,GAAGA,UAAU,IAAI,CAAC,CAAC;EAE7B,IAAIC,aAAa;EACjB,IAAIC,uBAAuB;EAC3B,IAAIC,cAAc;EAClB,IAAIC,QAAQ;EACZ,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,KAAKJ,aAAa,IAAID,UAAU,EAAE;IAChCG,cAAc,GAAGH,UAAU,CAACC,aAAa,CAAC;;IAE1C;IACA,IAAIN,iBAAiB,CAACM,aAAa,CAAC,EAAE;MACpCI,KAAK,CAACJ,aAAa,CAAC,GAAGE,cAAc;MACrC;IACF;;IAEA;IACAD,uBAAuB,GAAGD,aAAa,CAACK,WAAW,CAAC,CAAC;IACrD,IAAIV,cAAc,CAACW,IAAI,CAAChB,cAAc,EAAEW,uBAAuB,CAAC,EAAE;MAChEE,QAAQ,GAAGb,cAAc,CAACW,uBAAuB,CAAC;MAClDG,KAAK,CAACD,QAAQ,CAACI,YAAY,CAAC,GAC1BJ,QAAQ,CAACK,eAAe,IACvBL,QAAQ,CAACM,yBAAyB,IAAI,CAACP,cAAe,GACnD,IAAI,GACJA,cAAc;MACpB;IACF;;IAEA;IACA,IAAIP,cAAc,CAACW,IAAI,CAACd,aAAa,EAAEQ,aAAa,CAAC,EAAE;MACrDG,QAAQ,GAAGX,aAAa,CAACQ,aAAa,CAAC;MACvCI,KAAK,CAACD,QAAQ,CAACI,YAAY,CAAC,GAAGL,cAAc;MAC7C;IACF;;IAEA;IACA,IAAId,SAAS,CAACsB,0BAA0B,EAAE;MACxCN,KAAK,CAACJ,aAAa,CAAC,GAAGE,cAAc;IACvC;EACF;;EAEA;EACAb,YAAY,CAACU,UAAU,CAACY,KAAK,EAAEP,KAAK,CAAC;EAErC,OAAOA,KAAK;AACd;AAEAQ,MAAM,CAACC,OAAO,GAAGf,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script"}